{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  name: 'CustomerPage',\n  setup() {\n    const isCheckoutProcess = ref(false); // 用于控制是否显示“确认购买”按钮\n    const products = ref([]);\n    const showDetails = ref(false);\n    const selectedProduct = ref({});\n    const categories = ref(['全部', '家居日用', '穿搭服饰', '米面粮油', '生鲜水果', '科技数码', '运动户外']);\n    const searchQuery = ref('');\n    const deliveryAddress = ref('');\n    const purchaseQuantity = ref(1);\n    const showPurchaseForm = ref(false);\n    const cartCount = ref(0);\n    const showCart = ref(false);\n    const cartItems = ref([]);\n    const showMyOptions = ref(false);\n    const showAddressDialog = ref(false);\n    const showOrderDialog = ref(false);\n    const addresses = ref([]);\n    const orders = ref([]); // 用于存储订单信息\n    const newAddress = ref({\n      uname: '',\n      uphone: '',\n      addressName: '',\n      umail: ''\n    });\n    const showAddAddressDialog = ref(false);\n    const showEditAddressDialog = ref(false);\n    const editAddressData = ref({\n      aid: '',\n      uname: '',\n      uphone: '',\n      addressName: '',\n      umail: ''\n    });\n    const selectedAddress = ref(null);\n    const showOrderDetailsDialog = ref(false);\n    const orderDetails = ref([]);\n    const fetchProducts = async (category = '全部') => {\n      try {\n        const url = category === '全部' ? '/eShop/product/alllist' : `/eShop/product/typelist?pType=${category}`;\n        const response = await axios.get(url);\n        if (response.data.code === 200) {\n          products.value = response.data.data;\n        } else {\n          console.error('Failed to fetch products:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    };\n    const fetchProductsByCategory = category => {\n      fetchProducts(category);\n    };\n    const searchProduct = async () => {\n      try {\n        const response = await axios.get(`/eShop/product/getproduct`, {\n          params: {\n            pName: searchQuery.value\n          }\n        });\n        if (response.data.code === 200) {\n          products.value = response.data.data;\n        } else {\n          console.error('Failed to fetch products:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    };\n    const showProductDetails = product => {\n      selectedProduct.value = product;\n      showDetails.value = true;\n      showPurchaseForm.value = false;\n    };\n    const formatPath = path => path.replace(/\\\\/g, '/');\n    const decreaseQuantity = () => {\n      if (purchaseQuantity.value > 1) {\n        purchaseQuantity.value--;\n      }\n    };\n    const increaseQuantity = () => {\n      purchaseQuantity.value++;\n    };\n    const addToCart = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      const cartData = {\n        uid0: uid,\n        pid: selectedProduct.value.pid,\n        p_id_count: purchaseQuantity.value\n      };\n      try {\n        const response = await axios.post('/eShop/shopcar/addshopcar', cartData);\n        if (response.data.code === 200) {\n          alert('商品已加入购物车！');\n          fetchCartCount(); // 更新购物车数量\n        } else {\n          alert('加入购物车失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error adding to cart:', error);\n        alert('加入购物车失败，请重试。');\n      }\n    };\n    const confirmPurchaseWithAddress = async () => {\n      if (!selectedAddress.value) {\n        alert('请选择一个地址');\n        return;\n      }\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n\n      // 构建订单数据\n      const orderData = {\n        uid0: uid,\n        ostate: '0',\n        otime: Date.now(),\n        pcount: purchaseQuantity.value.toString(),\n        address: `${selectedAddress.value.uname} ${selectedAddress.value.umail} ${selectedAddress.value.addressName}`\n      };\n      try {\n        // 发送请求以生成订单\n        const orderResponse = await axios.post('/eShop/orders/addorders', orderData);\n        const oid = orderResponse.data.data;\n        if (oid) {\n          // 构建购物车结算数据\n          const selectedItems = cartItems.value.filter(item => item.selected);\n          const orderDetailData = selectedItems.map(item => ({\n            uid0: uid,\n            pid: item.pid,\n            p_id_count: item.quantity\n          }));\n\n          // 发送请求以完成购物车结算\n          const orderDetailResponse = await axios.post('/eShop/shopcar/ordershopcar', orderDetailData, {\n            params: {\n              oid: oid\n            }\n          });\n          if (orderDetailResponse.data.code === 200) {\n            alert('订单提交成功！');\n            showAddressDialog.value = false; // 关闭地址管理对话框\n            fetchCartItems(); // 重新获取购物车商品以刷新界面\n            fetchCartCount(); // 更新购物车数量\n          } else {\n            alert('订单提交失败，请重试。');\n          }\n        } else {\n          alert('订单提交失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error processing purchase:', error);\n        alert('订单提交失败，请重试。');\n      }\n    };\n    const fetchCartCount = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.get('/eShop/shopcar/getusershopcarcount', {\n          params: {\n            uid: uid\n          }\n        });\n        if (response.data.code === 200) {\n          cartCount.value = response.data.data;\n        } else {\n          console.error('Failed to fetch cart count:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching cart count:', error);\n      }\n    };\n    const fetchCartItems = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.get('/eShop/shopcar/getusershopcar', {\n          params: {\n            uid: uid\n          }\n        });\n        if (response.data.code === 200) {\n          const items = response.data.data;\n\n          // 获取每个商品的已添加数量\n          for (const item of items) {\n            try {\n              const countResponse = await axios.get('/eShop/shopcar/getproductcount', {\n                params: {\n                  uid0: uid,\n                  pId: item.pid\n                }\n              });\n              if (countResponse.data.code === 200) {\n                item.quantity = countResponse.data.data; // 设置默认值为已添加数量\n              } else {\n                console.error('Failed to fetch product count:', countResponse.data.msg);\n                item.quantity = 1; // 如果获取失败，默认值为1\n              }\n            } catch (error) {\n              console.error('Error fetching product count:', error);\n              item.quantity = 1; // 如果请求失败，默认值为1\n            }\n            item.selected = false; // 初始化选中状态为 false\n          }\n          cartItems.value = items;\n        } else {\n          console.error('Failed to fetch cart items:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching cart items:', error);\n      }\n    };\n    const fetchOrders = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.get('/eShop/orders/getuserorders', {\n          params: {\n            uid: uid\n          }\n        });\n        if (response.data.code === 200) {\n          orders.value = response.data.data;\n        } else {\n          console.error('Failed to fetch orders:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    };\n    const fetchOrderDetails = async oid => {\n      try {\n        // 获取订单详情\n        const response = await axios.get('/eShop/orders/getordersdetail', {\n          params: {\n            oid: oid\n          }\n        });\n        if (response.data.code === 200) {\n          const details = response.data.data;\n\n          // 获取每个订单详情的商品信息\n          for (const detail of details) {\n            const productResponse = await axios.get('/eShop/product/getproductbyid', {\n              params: {\n                pid: detail.pid\n              }\n            });\n            if (productResponse.data.code === 200) {\n              detail.product = productResponse.data.data;\n            } else {\n              console.error('Failed to fetch product:', productResponse.data.msg);\n            }\n          }\n          orderDetails.value = details;\n          showOrderDetailsDialog.value = true;\n        } else {\n          console.error('Failed to fetch order details:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n      }\n    };\n    const calculateTotalAmount = () => {\n      return orderDetails.value.reduce((total, detail) => {\n        const amount = parseFloat(detail.odPMoney); // 将金额转换为数字\n        return total + (isNaN(amount) ? 0 : amount); // 如果转换失败，使用0作为默认值\n      }, 0);\n    };\n    const payNow = () => {\n      alert('付款功能尚未实现');\n      // 在这里实现付款逻辑\n    };\n    const deleteOrder = async () => {\n      const oid = orderDetails.value[0]?.oid; // 假设订单详情中包含订单ID\n      if (!oid) {\n        alert('无法获取订单ID');\n        return;\n      }\n      try {\n        const response = await axios.delete(`/eShop/orders/delete/${oid}`);\n        if (response.data.code === 200) {\n          alert('订单删除成功！');\n          showOrderDetailsDialog.value = false; // 关闭订单详情对话框\n          fetchOrders(); // 重新获取订单列表\n        } else {\n          alert('订单删除失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error deleting order:', error);\n        alert('订单删除失败，请重试。');\n      }\n    };\n    const formatOrderTime = timestamp => {\n      const numericTimestamp = Number(timestamp);\n      if (typeof numericTimestamp !== 'number') {\n        console.error('Invalid timestamp:', numericTimestamp);\n        return 'Invalid date';\n      }\n      const date = new Date(numericTimestamp);\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      const seconds = date.getSeconds();\n      return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日` + `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    };\n    const formatOrderState = state => {\n      switch (state) {\n        case 0:\n          return '未付款';\n        case 1:\n          return '已付款';\n        case 2:\n          return '已到货';\n        default:\n          return '未知状态';\n      }\n    };\n    const decreaseCartItemQuantity = item => {\n      if (item.quantity > 1) {\n        item.quantity--;\n      }\n    };\n    const increaseCartItemQuantity = item => {\n      item.quantity++;\n    };\n    const showCartDialog = () => {\n      fetchCartItems();\n      showCart.value = true;\n    };\n    const scrollToTop = () => {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    };\n    const checkout = () => {\n      // 过滤出选中的商品\n      const selectedItems = cartItems.value.filter(item => item.selected);\n      if (selectedItems.length === 0) {\n        alert('请选择要结算的商品');\n        return;\n      }\n\n      // 显示地址选择对话框\n      openAddressDialogForCheckout();\n    };\n    const fetchAddresses = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.get('/eShop/address/getuseraddress', {\n          params: {\n            uid: uid\n          }\n        });\n        if (response.data.code === 200) {\n          addresses.value = response.data.data;\n        } else {\n          console.error('Failed to fetch addresses:', response.data.msg);\n        }\n      } catch (error) {\n        console.error('Error fetching addresses:', error);\n      }\n    };\n    const addAddress = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.post('/eShop/address/adduseraddress', {\n          ...newAddress.value,\n          uid: uid\n        });\n        if (response.data.code === 200) {\n          alert('地址添加成功！');\n          fetchAddresses(); // 重新获取地址列表\n          newAddress.value = {\n            uname: '',\n            uphone: '',\n            addressName: '',\n            umail: ''\n          }; // 清空表单\n          showAddAddressDialog.value = false; // 关闭新增地址对话框\n        } else {\n          alert('地址添加失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error adding address:', error);\n        alert('地址添加失败，请重试。');\n      }\n    };\n    const editAddress = address => {\n      editAddressData.value = {\n        ...address\n      };\n      showEditAddressDialog.value = true;\n    };\n    const updateAddress = async () => {\n      const uid = localStorage.getItem('uid');\n      if (!uid) {\n        console.error('User ID not found in localStorage');\n        return;\n      }\n      try {\n        const response = await axios.post('/eShop/address/updateuseraddress', {\n          ...editAddressData.value,\n          uid: uid\n        });\n        if (response.data.code === 200) {\n          alert('地址更新成功！');\n          fetchAddresses(); // 重新获取地址列表\n          showEditAddressDialog.value = false; // 关闭编辑地址对话框\n        } else {\n          alert('地址更新失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error updating address:', error);\n        alert('地址更新失败，请重试。');\n      }\n    };\n    const deleteAddress = async aid => {\n      try {\n        const response = await axios.delete(`/eShop/address/delete/${aid}`);\n        if (response.data.code === 200) {\n          alert('地址删除成功！');\n          fetchAddresses(); // 重新获取地址列表\n        } else {\n          alert('地址删除失败，请重试。');\n        }\n      } catch (error) {\n        console.error('Error deleting address:', error);\n        alert('地址删除失败，请重试。');\n      }\n    };\n    const selectAddress = address => {\n      selectedAddress.value = address;\n    };\n    const toggleMyOptions = () => {\n      showMyOptions.value = !showMyOptions.value;\n    };\n    const openAddressDialogForCheckout = () => {\n      isCheckoutProcess.value = true;\n      showAddressDialog.value = true;\n    };\n    const openAddressDialogForManagement = () => {\n      isCheckoutProcess.value = false;\n      showAddressDialog.value = true;\n      showMyOptions.value = false;\n    };\n    onMounted(() => {\n      const jwt = localStorage.getItem('jwt');\n      if (jwt) {\n        axios.defaults.headers.common['Authorization'] = `${jwt}`;\n      }\n      fetchProducts();\n      fetchCartCount();\n      fetchAddresses();\n    });\n    return {\n      products,\n      showDetails,\n      selectedProduct,\n      categories,\n      searchQuery,\n      deliveryAddress,\n      purchaseQuantity,\n      showPurchaseForm,\n      cartCount,\n      showCart,\n      cartItems,\n      showMyOptions,\n      showAddressDialog,\n      showOrderDialog,\n      addresses,\n      orders,\n      newAddress,\n      showAddAddressDialog,\n      showEditAddressDialog,\n      editAddressData,\n      selectedAddress,\n      showOrderDetailsDialog,\n      orderDetails,\n      fetchProductsByCategory,\n      searchProduct,\n      showProductDetails,\n      formatPath,\n      decreaseQuantity,\n      increaseQuantity,\n      addToCart,\n      confirmPurchaseWithAddress,\n      scrollToTop,\n      isCheckoutProcess,\n      showCartDialog,\n      decreaseCartItemQuantity,\n      increaseCartItemQuantity,\n      checkout,\n      fetchAddresses,\n      addAddress,\n      editAddress,\n      updateAddress,\n      deleteAddress,\n      selectAddress,\n      toggleMyOptions,\n      openAddressDialogForCheckout,\n      openAddressDialogForManagement,\n      fetchOrders,\n      fetchOrderDetails,\n      calculateTotalAmount,\n      payNow,\n      deleteOrder,\n      formatOrderTime,\n      formatOrderState\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","name","setup","isCheckoutProcess","products","showDetails","selectedProduct","categories","searchQuery","deliveryAddress","purchaseQuantity","showPurchaseForm","cartCount","showCart","cartItems","showMyOptions","showAddressDialog","showOrderDialog","addresses","orders","newAddress","uname","uphone","addressName","umail","showAddAddressDialog","showEditAddressDialog","editAddressData","aid","selectedAddress","showOrderDetailsDialog","orderDetails","fetchProducts","category","url","response","get","data","code","value","console","error","msg","fetchProductsByCategory","searchProduct","params","pName","showProductDetails","product","formatPath","path","replace","decreaseQuantity","increaseQuantity","addToCart","uid","localStorage","getItem","cartData","uid0","pid","p_id_count","post","alert","fetchCartCount","confirmPurchaseWithAddress","orderData","ostate","otime","Date","now","pcount","toString","address","orderResponse","oid","selectedItems","filter","item","selected","orderDetailData","map","quantity","orderDetailResponse","fetchCartItems","items","countResponse","pId","fetchOrders","fetchOrderDetails","details","detail","productResponse","calculateTotalAmount","reduce","total","amount","parseFloat","odPMoney","isNaN","payNow","deleteOrder","delete","formatOrderTime","timestamp","numericTimestamp","Number","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","getFullYear","getMonth","getDate","padStart","formatOrderState","state","decreaseCartItemQuantity","increaseCartItemQuantity","showCartDialog","scrollToTop","window","scrollTo","top","behavior","checkout","length","openAddressDialogForCheckout","fetchAddresses","addAddress","editAddress","updateAddress","deleteAddress","selectAddress","toggleMyOptions","openAddressDialogForManagement","jwt","defaults","headers","common"],"sources":["E:\\Vue\\jsproject\\shop\\src\\views\\CustomerPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <!-- 侧边悬浮栏 -->\r\n    <div class=\"sidebar\">\r\n      <div class=\"sidebar-item\" @click=\"showCartDialog\">\r\n        <img src=\"/icon/cart (1).png\" alt=\"购物车\" class=\"icon\" />\r\n        <span class=\"badge\">{{ cartCount }}</span>\r\n        <p>购物车</p>\r\n      </div>\r\n      <div class=\"sidebar-item\" @click=\"toggleMyOptions\">\r\n        <img src=\"/icon/my.png\" alt=\"我的\" class=\"icon\" />\r\n        <p>我的</p>\r\n        <!-- 浮动选项 -->\r\n        <div v-if=\"showMyOptions\" class=\"floating-options\">\r\n          <button @click=\"openAddressDialogForManagement\">地址</button>\r\n          <button @click=\"showOrderDialog = true; showMyOptions = false; fetchOrders()\">订单</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"sidebar-item\">\r\n        <img src=\"/icon/service.png\" alt=\"客服\" class=\"icon\" />\r\n        <p>客服</p>\r\n      </div>\r\n      <div class=\"sidebar-item\">\r\n        <img src=\"/icon/post.png\" alt=\"反馈\" class=\"icon\" />\r\n        <p>反馈</p>\r\n      </div>\r\n      <div class=\"sidebar-item\" @click=\"scrollToTop\">\r\n        <img src=\"/icon/top (1).png\" alt=\"回顶部\" class=\"icon\" />\r\n        <p>回顶部</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 其他内容 -->\r\n    <div class=\"sticky-header\">\r\n      <div class=\"header\">\r\n        <img src=\"@/assets/image.png\" alt=\"Logo\" class=\"logo\" />\r\n        <div class=\"search-bar\">\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"searchQuery\"\r\n            placeholder=\"输入商品名\"\r\n            class=\"search-input\"\r\n          />\r\n          <button @click=\"searchProduct\" class=\"search-button\">搜索</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"header-divider\"></div>\r\n      <div class=\"category-bar\">\r\n        <div v-for=\"(category, index) in categories\" :key=\"category\" class=\"category-item\">\r\n          <button @click=\"fetchProductsByCategory(category)\">\r\n            {{ category }}\r\n          </button>\r\n          <span v-if=\"index < categories.length - 1\" class=\"divider\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"product-container\">\r\n      <div class=\"product-grid\">\r\n        <div v-for=\"product in products\" :key=\"product.id\" class=\"product-card\" @click=\"showProductDetails(product)\">\r\n          <div class=\"product-image-wrapper\">\r\n            <img :src=\"formatPath(product.purl)\" alt=\"商品图片\" class=\"product-image\" />\r\n          </div>\r\n          <div class=\"product-info\">\r\n            <h3 class=\"product-name\">{{ product.pname }}</h3>\r\n            <hr class=\"product-divider\" />\r\n            <p class=\"product-price\">{{ product.ppri }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <el-dialog v-model=\"showDetails\" title=\"商品详情\" :width=\"600\">\r\n        <img :src=\"formatPath(selectedProduct.purl)\" alt=\"商品图片\" class=\"product-image-large\" />\r\n        <p>名称: {{ selectedProduct.pname }}</p>\r\n        <p>类型: {{ selectedProduct.ptype }}</p>\r\n        <p>描述: {{ selectedProduct.pdes }}</p>\r\n        <p>库存: {{ selectedProduct.pcount }}</p>\r\n        <p>价格: ¥{{ selectedProduct.ppri }}</p>\r\n\r\n        <!-- 数量选择器 -->\r\n        <div class=\"quantity-control\">\r\n          <button @click=\"decreaseQuantity\">-</button>\r\n          <input type=\"number\" v-model.number=\"purchaseQuantity\" min=\"1\" class=\"quantity-input\" />\r\n          <button @click=\"increaseQuantity\">+</button>\r\n        </div>\r\n\r\n        <!-- 按钮 -->\r\n        <div class=\"button-group\">\r\n          <button @click=\"addToCart\" class=\"add-to-cart-button\">加入购物车</button>\r\n          <button @click=\"openAddressDialogForCheckout\" class=\"buy-now-button\">立即购买</button>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 购物车弹窗 -->\r\n      <el-dialog v-model=\"showCart\" title=\"购物车\" :width=\"600\">\r\n        <div class=\"cart-content\">\r\n          <div v-for=\"item in cartItems\" :key=\"item.id\" class=\"cart-item\">\r\n            <input type=\"checkbox\" v-model=\"item.selected\" /> <!-- 添加复选框 -->\r\n            <div class=\"cart-item-image\">\r\n              <img :src=\"formatPath(item.purl)\" alt=\"商品图片\" />\r\n            </div>\r\n            <div class=\"cart-item-info\">\r\n              <p class=\"cart-item-name\">{{ item.pname }}</p>\r\n              <p class=\"cart-item-price\">价格: ¥{{ item.ppri }}</p>\r\n              <div class=\"quantity-control\">\r\n                <button @click=\"decreaseCartItemQuantity(item)\">-</button>\r\n                <input type=\"number\" v-model.number=\"item.quantity\" min=\"1\" class=\"quantity-input\" />\r\n                <button @click=\"increaseCartItemQuantity(item)\">+</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"cart-footer\">\r\n            <button class=\"checkout-button\" @click=\"checkout\">结算</button>\r\n          </div>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 地址管理对话框 -->\r\n      <el-dialog v-model=\"showAddressDialog\" title=\"地址管理\" :width=\"600\">\r\n        <div class=\"address-list\">\r\n          <div\r\n            v-for=\"address in addresses\"\r\n            :key=\"address.aid\"\r\n            class=\"address-item\"\r\n            @click=\"selectAddress(address)\"\r\n            :class=\"{ 'selected-address': selectedAddress && selectedAddress.aid === address.aid }\"\r\n          >\r\n            <p class=\"address\">{{ address.addressName }}</p>\r\n            <div class=\"address-info\">\r\n              <span>{{ address.uname }}</span>\r\n              <span>{{ address.uphone }}</span>\r\n              <span>{{ address.umail }}</span>\r\n              <button @click.stop=\"editAddress(address)\" class=\"edit-button\">编辑</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"add-address\">\r\n          <button @click=\"showAddAddressDialog = true\" class=\"add-address-button\">+</button>\r\n        </div>\r\n        <div class=\"button-group\" v-if=\"isCheckoutProcess\">\r\n          <button @click=\"confirmPurchaseWithAddress\" class=\"confirm-button\">确认购买</button>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 新增地址对话框 -->\r\n      <el-dialog v-model=\"showAddAddressDialog\" title=\"新增地址\" :width=\"400\">\r\n        <div class=\"add-address-form\">\r\n          <input v-model=\"newAddress.uname\" placeholder=\"请输入姓名\" />\r\n          <input v-model=\"newAddress.uphone\" placeholder=\"请输入电话\" />\r\n          <input v-model=\"newAddress.addressName\" placeholder=\"请输入地址\" />\r\n          <input v-model=\"newAddress.umail\" placeholder=\"请输入邮箱\" />\r\n          <button @click=\"addAddress\" class=\"confirm-button\">确认</button>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 编辑地址对话框 -->\r\n      <el-dialog v-model=\"showEditAddressDialog\" title=\"编辑地址\" :width=\"400\">\r\n        <div class=\"edit-address-form\">\r\n          <input v-model=\"editAddressData.uname\" placeholder=\"请输入姓名\" />\r\n          <input v-model=\"editAddressData.uphone\" placeholder=\"请输入电话\" />\r\n          <input v-model=\"editAddressData.addressName\" placeholder=\"请输入地址\" />\r\n          <input v-model=\"editAddressData.umail\" placeholder=\"请输入邮箱\" />\r\n          <button @click=\"updateAddress\" class=\"confirm-button\">确认</button>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 订单管理对话框 -->\r\n      <el-dialog v-model=\"showOrderDialog\" title=\"订单管理\" :width=\"1200\">\r\n        <div class=\"order-content\">\r\n          <div v-for=\"order in orders\" :key=\"order.oid\" class=\"order-item\" @dblclick=\"fetchOrderDetails(order.oid)\">\r\n            <div class=\"order-item-row\">\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">订单创建时间:</div>\r\n                <div class=\"order-item-value\">{{ formatOrderTime(order.otime) }}</div>\r\n              </div>\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">订单状态:</div>\r\n                <div class=\"order-item-value\">{{ formatOrderState(order.ostate) }}</div>\r\n              </div>\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">商品种数:</div>\r\n                <div class=\"order-item-value\">{{ order.pcount }}</div>\r\n              </div>\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">姓名:</div>\r\n                <div class=\"order-item-value\">{{ order.address.split(' ')[0] }}</div>\r\n              </div>\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">邮箱:</div>\r\n                <div class=\"order-item-value\">{{ order.address.split(' ')[1] }}</div>\r\n              </div>\r\n              <div class=\"order-item-block\">\r\n                <div class=\"order-item-label\">地址:</div>\r\n                <div class=\"order-item-value\">{{ order.address.split(' ')[2] }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </el-dialog>\r\n\r\n      <!-- 订单详情对话框 -->\r\n      <el-dialog v-model=\"showOrderDetailsDialog\" title=\"订单详情\" :width=\"600\">\r\n        <div class=\"order-details-content\">\r\n          <div v-for=\"detail in orderDetails\" :key=\"detail.odid\" class=\"order-detail-item\">\r\n            <img :src=\"formatPath(detail.product.purl)\" alt=\"商品图片\" class=\"order-detail-image\" />\r\n            <p class=\"order-detail-name\">{{ detail.product.pname }}</p>\r\n            <p class=\"order-detail-quantity\">数量: {{ detail.odPCount }}</p>\r\n            <p class=\"order-detail-money\">金额: ¥{{ detail.odPMoney }}</p>\r\n          </div>\r\n          <!-- 显示总金额 -->\r\n          <div class=\"order-total\">\r\n            <p class=\"order-total-label\">总金额：</p>\r\n            <p class=\"order-total-amount\">¥{{ calculateTotalAmount() }}</p>\r\n          </div>\r\n        </div>\r\n        <!-- 立即付款和删除订单按钮 -->\r\n        <div class=\"order-details-footer\">\r\n          <button class=\"pay-now-button\" @click=\"payNow\">立即付款</button>\r\n          <button class=\"delete-order-button\" @click=\"deleteOrder\">删除订单</button>\r\n        </div>\r\n      </el-dialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'CustomerPage',\r\n  setup() {\r\n    const isCheckoutProcess = ref(false); // 用于控制是否显示“确认购买”按钮\r\n    const products = ref([]);\r\n    const showDetails = ref(false);\r\n    const selectedProduct = ref({});\r\n    const categories = ref(['全部', '家居日用', '穿搭服饰', '米面粮油', '生鲜水果', '科技数码', '运动户外']);\r\n    const searchQuery = ref('');\r\n    const deliveryAddress = ref('');\r\n    const purchaseQuantity = ref(1);\r\n    const showPurchaseForm = ref(false);\r\n    const cartCount = ref(0);\r\n    const showCart = ref(false);\r\n    const cartItems = ref([]);\r\n    const showMyOptions = ref(false);\r\n    const showAddressDialog = ref(false);\r\n    const showOrderDialog = ref(false);\r\n    const addresses = ref([]);\r\n    const orders = ref([]); // 用于存储订单信息\r\n    const newAddress = ref({\r\n      uname: '',\r\n      uphone: '',\r\n      addressName: '',\r\n      umail: '',\r\n    });\r\n    const showAddAddressDialog = ref(false);\r\n    const showEditAddressDialog = ref(false);\r\n    const editAddressData = ref({\r\n      aid: '',\r\n      uname: '',\r\n      uphone: '',\r\n      addressName: '',\r\n      umail: '',\r\n    });\r\n    const selectedAddress = ref(null);\r\n    const showOrderDetailsDialog = ref(false);\r\n    const orderDetails = ref([]);\r\n\r\n    const fetchProducts = async (category = '全部') => {\r\n      try {\r\n        const url = category === '全部' ? '/eShop/product/alllist' : `/eShop/product/typelist?pType=${category}`;\r\n        const response = await axios.get(url);\r\n        if (response.data.code === 200) {\r\n          products.value = response.data.data;\r\n        } else {\r\n          console.error('Failed to fetch products:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    };\r\n\r\n    const fetchProductsByCategory = (category) => {\r\n      fetchProducts(category);\r\n    };\r\n\r\n    const searchProduct = async () => {\r\n      try {\r\n        const response = await axios.get(`/eShop/product/getproduct`, {\r\n          params: { pName: searchQuery.value },\r\n        });\r\n        if (response.data.code === 200) {\r\n          products.value = response.data.data;\r\n        } else {\r\n          console.error('Failed to fetch products:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    };\r\n\r\n    const showProductDetails = (product) => {\r\n      selectedProduct.value = product;\r\n      showDetails.value = true;\r\n      showPurchaseForm.value = false;\r\n    };\r\n\r\n    const formatPath = (path) => path.replace(/\\\\/g, '/');\r\n\r\n    const decreaseQuantity = () => {\r\n      if (purchaseQuantity.value > 1) {\r\n        purchaseQuantity.value--;\r\n      }\r\n    };\r\n\r\n    const increaseQuantity = () => {\r\n      purchaseQuantity.value++;\r\n    };\r\n\r\n    const addToCart = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      const cartData = {\r\n        uid0: uid,\r\n        pid: selectedProduct.value.pid,\r\n        p_id_count: purchaseQuantity.value,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('/eShop/shopcar/addshopcar', cartData);\r\n        if (response.data.code === 200) {\r\n          alert('商品已加入购物车！');\r\n          fetchCartCount(); // 更新购物车数量\r\n        } else {\r\n          alert('加入购物车失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding to cart:', error);\r\n        alert('加入购物车失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const confirmPurchaseWithAddress = async () => {\r\n      if (!selectedAddress.value) {\r\n        alert('请选择一个地址');\r\n        return;\r\n      }\r\n\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      // 构建订单数据\r\n      const orderData = {\r\n        uid0: uid,\r\n        ostate: '0',\r\n        otime: Date.now(),\r\n        pcount: purchaseQuantity.value.toString(),\r\n        address: `${selectedAddress.value.uname} ${selectedAddress.value.umail} ${selectedAddress.value.addressName}`,\r\n      };\r\n\r\n      try {\r\n        // 发送请求以生成订单\r\n        const orderResponse = await axios.post('/eShop/orders/addorders', orderData);\r\n        const oid = orderResponse.data.data;\r\n\r\n        if (oid) {\r\n          // 构建购物车结算数据\r\n          const selectedItems = cartItems.value.filter(item => item.selected);\r\n          const orderDetailData = selectedItems.map(item => ({\r\n            uid0: uid,\r\n            pid: item.pid,\r\n            p_id_count: item.quantity,\r\n          }));\r\n\r\n          // 发送请求以完成购物车结算\r\n          const orderDetailResponse = await axios.post('/eShop/shopcar/ordershopcar', orderDetailData, {\r\n            params: { oid: oid }\r\n          });\r\n          if (orderDetailResponse.data.code === 200) {\r\n            alert('订单提交成功！');\r\n            showAddressDialog.value = false; // 关闭地址管理对话框\r\n            fetchCartItems(); // 重新获取购物车商品以刷新界面\r\n            fetchCartCount(); // 更新购物车数量\r\n          } else {\r\n            alert('订单提交失败，请重试。');\r\n          }\r\n        } else {\r\n          alert('订单提交失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing purchase:', error);\r\n        alert('订单提交失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const fetchCartCount = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get('/eShop/shopcar/getusershopcarcount', {\r\n          params: { uid: uid },\r\n        });\r\n        if (response.data.code === 200) {\r\n          cartCount.value = response.data.data;\r\n        } else {\r\n          console.error('Failed to fetch cart count:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching cart count:', error);\r\n      }\r\n    };\r\n\r\n    const fetchCartItems = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get('/eShop/shopcar/getusershopcar', {\r\n          params: { uid: uid },\r\n        });\r\n        if (response.data.code === 200) {\r\n          const items = response.data.data;\r\n\r\n          // 获取每个商品的已添加数量\r\n          for (const item of items) {\r\n            try {\r\n              const countResponse = await axios.get('/eShop/shopcar/getproductcount', {\r\n                params: { uid0: uid, pId: item.pid },\r\n              });\r\n\r\n              if (countResponse.data.code === 200) {\r\n                item.quantity = countResponse.data.data; // 设置默认值为已添加数量\r\n              } else {\r\n                console.error('Failed to fetch product count:', countResponse.data.msg);\r\n                item.quantity = 1; // 如果获取失败，默认值为1\r\n              }\r\n            } catch (error) {\r\n              console.error('Error fetching product count:', error);\r\n              item.quantity = 1; // 如果请求失败，默认值为1\r\n            }\r\n            item.selected = false; // 初始化选中状态为 false\r\n          }\r\n\r\n          cartItems.value = items;\r\n        } else {\r\n          console.error('Failed to fetch cart items:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching cart items:', error);\r\n      }\r\n    };\r\n\r\n    const fetchOrders = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get('/eShop/orders/getuserorders', {\r\n          params: { uid: uid },\r\n        });\r\n        if (response.data.code === 200) {\r\n          orders.value = response.data.data;\r\n        } else {\r\n          console.error('Failed to fetch orders:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      }\r\n    };\r\n\r\n    const fetchOrderDetails = async (oid) => {\r\n      try {\r\n        // 获取订单详情\r\n        const response = await axios.get('/eShop/orders/getordersdetail', {\r\n          params: { oid: oid },\r\n        });\r\n        if (response.data.code === 200) {\r\n          const details = response.data.data;\r\n\r\n          // 获取每个订单详情的商品信息\r\n          for (const detail of details) {\r\n            const productResponse = await axios.get('/eShop/product/getproductbyid', {\r\n              params: { pid: detail.pid },\r\n            });\r\n            if (productResponse.data.code === 200) {\r\n              detail.product = productResponse.data.data;\r\n            } else {\r\n              console.error('Failed to fetch product:', productResponse.data.msg);\r\n            }\r\n          }\r\n\r\n          orderDetails.value = details;\r\n          showOrderDetailsDialog.value = true;\r\n        } else {\r\n          console.error('Failed to fetch order details:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching order details:', error);\r\n      }\r\n    };\r\n\r\n    const calculateTotalAmount = () => {\r\n      return orderDetails.value.reduce((total, detail) => {\r\n        const amount = parseFloat(detail.odPMoney); // 将金额转换为数字\r\n        return total + (isNaN(amount) ? 0 : amount); // 如果转换失败，使用0作为默认值\r\n      }, 0);\r\n    };\r\n\r\n    const payNow = () => {\r\n      alert('付款功能尚未实现');\r\n      // 在这里实现付款逻辑\r\n    };\r\n\r\n    const deleteOrder = async () => {\r\n      const oid = orderDetails.value[0]?.oid; // 假设订单详情中包含订单ID\r\n      if (!oid) {\r\n        alert('无法获取订单ID');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.delete(`/eShop/orders/delete/${oid}`);\r\n        if (response.data.code === 200) {\r\n          alert('订单删除成功！');\r\n          showOrderDetailsDialog.value = false; // 关闭订单详情对话框\r\n          fetchOrders(); // 重新获取订单列表\r\n        } else {\r\n          alert('订单删除失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting order:', error);\r\n        alert('订单删除失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const formatOrderTime = (timestamp) => {\r\n      const numericTimestamp = Number(timestamp);\r\n      if (typeof numericTimestamp !== 'number') {\r\n        console.error('Invalid timestamp:', numericTimestamp);\r\n        return 'Invalid date';\r\n      }\r\n      const date = new Date(numericTimestamp);\r\n      const hours = date.getHours();\r\n      const minutes = date.getMinutes();\r\n      const seconds = date.getSeconds();\r\n      return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日` +\r\n        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    const formatOrderState = (state) => {\r\n      switch (state) {\r\n        case 0:\r\n          return '未付款';\r\n        case 1:\r\n          return '已付款';\r\n        case 2:\r\n          return '已到货';\r\n        default:\r\n          return '未知状态';\r\n      }\r\n    };\r\n\r\n    const decreaseCartItemQuantity = (item) => {\r\n      if (item.quantity > 1) {\r\n        item.quantity--;\r\n      }\r\n    };\r\n\r\n    const increaseCartItemQuantity = (item) => {\r\n      item.quantity++;\r\n    };\r\n\r\n    const showCartDialog = () => {\r\n      fetchCartItems();\r\n      showCart.value = true;\r\n    };\r\n\r\n    const scrollToTop = () => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    };\r\n\r\n    const checkout = () => {\r\n      // 过滤出选中的商品\r\n      const selectedItems = cartItems.value.filter(item => item.selected);\r\n\r\n      if (selectedItems.length === 0) {\r\n        alert('请选择要结算的商品');\r\n        return;\r\n      }\r\n\r\n      // 显示地址选择对话框\r\n      openAddressDialogForCheckout();\r\n    };\r\n\r\n    const fetchAddresses = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get('/eShop/address/getuseraddress', {\r\n          params: { uid: uid },\r\n        });\r\n        if (response.data.code === 200) {\r\n          addresses.value = response.data.data;\r\n        } else {\r\n          console.error('Failed to fetch addresses:', response.data.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching addresses:', error);\r\n      }\r\n    };\r\n\r\n    const addAddress = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post('/eShop/address/adduseraddress', {\r\n          ...newAddress.value,\r\n          uid: uid,\r\n        });\r\n        if (response.data.code === 200) {\r\n          alert('地址添加成功！');\r\n          fetchAddresses(); // 重新获取地址列表\r\n          newAddress.value = { uname: '', uphone: '', addressName: '', umail: '' }; // 清空表单\r\n          showAddAddressDialog.value = false; // 关闭新增地址对话框\r\n        } else {\r\n          alert('地址添加失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding address:', error);\r\n        alert('地址添加失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const editAddress = (address) => {\r\n      editAddressData.value = { ...address };\r\n      showEditAddressDialog.value = true;\r\n    };\r\n\r\n    const updateAddress = async () => {\r\n      const uid = localStorage.getItem('uid');\r\n      if (!uid) {\r\n        console.error('User ID not found in localStorage');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post('/eShop/address/updateuseraddress', {\r\n          ...editAddressData.value,\r\n          uid: uid,\r\n        });\r\n        if (response.data.code === 200) {\r\n          alert('地址更新成功！');\r\n          fetchAddresses(); // 重新获取地址列表\r\n          showEditAddressDialog.value = false; // 关闭编辑地址对话框\r\n        } else {\r\n          alert('地址更新失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating address:', error);\r\n        alert('地址更新失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const deleteAddress = async (aid) => {\r\n      try {\r\n        const response = await axios.delete(`/eShop/address/delete/${aid}`);\r\n        if (response.data.code === 200) {\r\n          alert('地址删除成功！');\r\n          fetchAddresses(); // 重新获取地址列表\r\n        } else {\r\n          alert('地址删除失败，请重试。');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting address:', error);\r\n        alert('地址删除失败，请重试。');\r\n      }\r\n    };\r\n\r\n    const selectAddress = (address) => {\r\n      selectedAddress.value = address;\r\n    };\r\n\r\n    const toggleMyOptions = () => {\r\n      showMyOptions.value = !showMyOptions.value;\r\n    };\r\n\r\n    const openAddressDialogForCheckout = () => {\r\n      isCheckoutProcess.value = true;\r\n      showAddressDialog.value = true;\r\n    };\r\n\r\n    const openAddressDialogForManagement = () => {\r\n      isCheckoutProcess.value = false;\r\n      showAddressDialog.value = true;\r\n      showMyOptions.value = false;\r\n    };\r\n\r\n    onMounted(() => {\r\n      const jwt = localStorage.getItem('jwt');\r\n      if (jwt) {\r\n        axios.defaults.headers.common['Authorization'] = `${jwt}`;\r\n      }\r\n      fetchProducts();\r\n      fetchCartCount();\r\n      fetchAddresses();\r\n    });\r\n\r\n    return {\r\n      products,\r\n      showDetails,\r\n      selectedProduct,\r\n      categories,\r\n      searchQuery,\r\n      deliveryAddress,\r\n      purchaseQuantity,\r\n      showPurchaseForm,\r\n      cartCount,\r\n      showCart,\r\n      cartItems,\r\n      showMyOptions,\r\n      showAddressDialog,\r\n      showOrderDialog,\r\n      addresses,\r\n      orders,\r\n      newAddress,\r\n      showAddAddressDialog,\r\n      showEditAddressDialog,\r\n      editAddressData,\r\n      selectedAddress,\r\n      showOrderDetailsDialog,\r\n      orderDetails,\r\n      fetchProductsByCategory,\r\n      searchProduct,\r\n      showProductDetails,\r\n      formatPath,\r\n      decreaseQuantity,\r\n      increaseQuantity,\r\n      addToCart,\r\n      confirmPurchaseWithAddress,\r\n      scrollToTop,\r\n      isCheckoutProcess,\r\n      showCartDialog,\r\n      decreaseCartItemQuantity,\r\n      increaseCartItemQuantity,\r\n      checkout,\r\n      fetchAddresses,\r\n      addAddress,\r\n      editAddress,\r\n      updateAddress,\r\n      deleteAddress,\r\n      selectAddress,\r\n      toggleMyOptions,\r\n      openAddressDialogForCheckout,\r\n      openAddressDialogForManagement,\r\n      fetchOrders,\r\n      fetchOrderDetails,\r\n      calculateTotalAmount,\r\n      payNow,\r\n      deleteOrder,\r\n      formatOrderTime,\r\n      formatOrderState,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n.order-details-footer {\r\n  display: flex; /* 使用 flexbox 布局 */\r\n  justify-content: center; /* 水平居中 */\r\n  align-items: center; /* 垂直居中 */\r\n  margin-top: 20px; /* 顶部外边距 */\r\n  padding-bottom: 20px; /* 底部内边距 */\r\n}\r\n\r\n.delete-order-button {\r\n  background-color: #ff4d4f;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-right: 10px; /* 右侧外边距 */\r\n}\r\n\r\n.delete-order-button:hover {\r\n  background-color: #d9363e;\r\n}\r\n\r\n.pay-now-button {\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-right: 10px; /* 右侧外边距 */\r\n}\r\n\r\n.pay-now-button:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\n.order-details-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px; /* 每个订单项之间的间距 */\r\n}\r\n\r\n.order-detail-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n\r\n.order-detail-image {\r\n  width: 80px; /* 缩略图宽度 */\r\n  height: 80px; /* 缩略图高度 */\r\n  object-fit: cover; /* 保持图片比例 */\r\n  margin-right: 15px; /* 图片与文本之间的间距 */\r\n}\r\n\r\n.order-detail-name {\r\n  flex: 2; /* 占据较多空间 */\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n}\r\n\r\n.order-detail-quantity,\r\n.order-detail-money {\r\n  flex: 1; /* 占据较少空间 */\r\n  font-size: 14px;\r\n  text-align: center; /* 居中对齐 */\r\n}\r\n.order-content {\r\n  max-width: 100%; /* 允许对话框占据更大的宽度 */\r\n  padding: 10px;\r\n}\r\n\r\n.order-item {\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  background-color: #f9f9f9;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.order-item-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center; /* 垂直居中对齐 */\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.order-item-block {\r\n  flex: 1;\r\n  text-align: center;\r\n  min-width: 150px; /* 增加最小宽度 */\r\n}\r\n\r\n.order-item-label {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.order-item-value {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n\r\n\r\n\r\n.order-total {\r\n  display: flex;\r\n  justify-content: flex-end; /* 将总金额对齐到右侧 */\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-top: 1px solid #ddd; /* 添加顶部边框 */\r\n  margin-top: 10px; /* 与上方内容的间距 */\r\n}\r\n\r\n.order-total-label {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin-right: 10px; /* 标签与金额之间的间距 */\r\n}\r\n\r\n.order-total-amount {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #e74c3c; /* 红色字体 */\r\n}\r\n\r\n\r\n\r\n\r\n.selected-address {\r\n  background-color: #e0f7fa; /* 淡蓝色背景 */\r\n  border: 2px solid #06899a; /* 选中时的边框色 */\r\n}\r\n\r\n.app-container {\r\n  position: relative;\r\n  min-height: 100vh;\r\n  background: linear-gradient(to bottom, #b3e5fc, #f8bbd0);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 50%;\r\n  right: 0;\r\n  transform: translateY(-50%);\r\n  background-color: white;\r\n  border-radius: 10px 0 0 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 5000;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 380px;\r\n  width: 60px;\r\n}\r\n\r\n.sidebar-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  position: relative;\r\n  padding-top: 8px;\r\n}\r\n\r\n.sidebar-item p {\r\n  margin-top: 2px;\r\n}\r\n\r\n.sidebar-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.badge {\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  background-color: red;\r\n  color: white;\r\n  border-radius: 50%;\r\n  padding: 2px 6px;\r\n  font-size: 12px;\r\n}\r\n\r\n.floating-options {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: -70px;\r\n  transform: translateY(-50%);\r\n  background-color: white;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n}\r\n\r\n.floating-options button {\r\n  margin-bottom: 5px;\r\n  padding: 5px 10px;\r\n  background-color: #e0f7fa;\r\n  color: #007bff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.floating-options button:hover {\r\n  background-color: #b3e5fc;\r\n}\r\n\r\n.sticky-header {\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1000;\r\n  width: 100%;\r\n  background: linear-gradient(to bottom, #f8bbd0, #b3e5fc);\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  margin-top: -20px;\r\n  padding: 5px 0;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px;\r\n}\r\n\r\n.logo {\r\n  width: 60px;\r\n  height: auto;\r\n  margin-right: 20px;\r\n}\r\n\r\n.search-bar {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-input {\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  width: 600px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.search-button {\r\n  padding: 8px 16px;\r\n  background-color: #e0f7fa;\r\n  color: #007bff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.search-button:hover {\r\n  background-color: #b3e5fc;\r\n}\r\n\r\n.header-divider {\r\n  width: 100%;\r\n  height: 1px;\r\n  background-color: #e0e0e0;\r\n  margin: 5px 0;\r\n}\r\n\r\n.category-bar {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 5px;\r\n}\r\n\r\n.category-item {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.category-item button {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  font-size: 16px;\r\n  font-family: 'Arial', sans-serif;\r\n  color: #007bff;\r\n}\r\n\r\n.category-item button:hover {\r\n  background-color: rgba(179, 229, 252, 0.5);\r\n  color: #0056b3;\r\n}\r\n\r\n.divider {\r\n  width: 1px;\r\n  height: 20px;\r\n  background-color: #e0e0e0;\r\n  margin: 0 10px;\r\n}\r\n\r\n.product-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 90%;\r\n  margin: 20px auto;\r\n}\r\n\r\n.product-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  gap: 20px;\r\n  width: 100%;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.product-card {\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  transition: transform 0.2s;\r\n  background-color: white;\r\n}\r\n\r\n.product-card:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.product-image-wrapper {\r\n  width: 100%;\r\n  height: 150px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.product-image {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.product-info {\r\n  padding: 10px;\r\n  text-align: left;\r\n}\r\n\r\n.product-divider {\r\n  margin: 10px 0;\r\n  border: none;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.product-name {\r\n  font-size: 16px;\r\n  margin: 0;\r\n}\r\n\r\n.product-price {\r\n  color: #ff5722;\r\n  font-size: 25px;\r\n  margin: 5px 0 0;\r\n}\r\n.product-price::before {\r\n  content: '¥';\r\n  font-size: 16px;\r\n  vertical-align: middle;\r\n}\r\n.product-image-large {\r\n  width: 100%;\r\n  height: 300px;\r\n  object-fit: contain;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-dialog__body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  font-size: 18px;\r\n}\r\n.el-dialog__body p {\r\n  font-size: 16px;\r\n  margin: 5px 0;\r\n}\r\n\r\n.quantity-control {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.quantity-control button {\r\n  padding: 5px 10px;\r\n  border: 1px solid #ccc;\r\n  background-color: #f0f0f0;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  margin: 0 5px;\r\n}\r\n\r\n.quantity-input {\r\n  width: 250px;\r\n  padding: 8px;\r\n  margin: 0 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 80%;\r\n  margin: 20px auto;\r\n  gap: 50px;\r\n}\r\n\r\n.add-to-cart-button,\r\n.buy-now-button {\r\n  flex: 1;\r\n  padding: 15px 25px;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.add-to-cart-button {\r\n  background-color: #2196f3;\r\n}\r\n\r\n.add-to-cart-button:hover {\r\n  background-color: #1976d2;\r\n}\r\n\r\n.buy-now-button {\r\n  background-color: #ff9800;\r\n}\r\n\r\n.buy-now-button:hover {\r\n  background-color: #fb8c00;\r\n}\r\n\r\n.purchase-form {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.address-input {\r\n  width: 80%;\r\n  padding: 8px;\r\n  margin-top: 5px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.confirm-button {\r\n  padding: 10px 20px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.confirm-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.cart-content {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.cart-item-image {\r\n  flex: 0 0 80px;\r\n  height: 80px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.cart-item-image img {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.cart-item-info {\r\n  flex: 1;\r\n  padding-left: 10px;\r\n}\r\n\r\n.cart-item-name {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin: 0 0 5px;\r\n}\r\n\r\n.cart-item-price {\r\n  color: #ff5722;\r\n  margin: 0 0 10px;\r\n}\r\n\r\n.quantity-control {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.quantity-control button {\r\n  padding: 5px 10px;\r\n  border: 1px solid #ccc;\r\n  background-color: #f0f0f0;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  margin: 0 5px;\r\n}\r\n\r\n.quantity-input {\r\n  width: 50px;\r\n  padding: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n}\r\n\r\n.cart-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  padding: 10px;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.checkout-button {\r\n  padding: 10px 20px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.checkout-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.el-dialog {\r\n  width: 600px !important;\r\n  max-width: 90vw;\r\n}\r\n\r\n.my-options {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.address-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.address-item {\r\n  background-color: #ffffff; /* White background for each address item */\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.address-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.address {\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  color: #333;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.address-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  color: #555;\r\n}\r\n\r\n.edit-button {\r\n  padding: 5px 10px;\r\n  background-color: #e0f7fa;\r\n  color: #007bff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.edit-button:hover {\r\n  background-color: #b3e5fc;\r\n}\r\n\r\n.add-address {\r\n  margin-top: 20px;\r\n}\r\n\r\n.add-address input {\r\n  display: block;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 新增的编辑地址对话框样式 */\r\n.edit-address-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n}\r\n\r\n.edit-address-form input {\r\n  width: 80%;\r\n  padding: 8px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.edit-address-form .confirm-button {\r\n  padding: 10px 20px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.edit-address-form .confirm-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n/* 新增地址对话框样式 */\r\n.add-address-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n}\r\n\r\n.add-address-form input {\r\n  width: 80%;\r\n  padding: 8px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.add-address-form .confirm-button {\r\n  padding: 10px 20px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.add-address-form .confirm-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n/* 新增地址按钮样式 */\r\n.add-address-button {\r\n  padding: 10px 20px;\r\n  background-color: #e0f7fa;\r\n  color: #007bff;\r\n  border: none;\r\n  border-radius: 9px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  font-size: 18px; /* 放大按钮内文字和图标 */\r\n}\r\n\r\n.add-address-button:hover {\r\n  background-color: #b3e5fc;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}