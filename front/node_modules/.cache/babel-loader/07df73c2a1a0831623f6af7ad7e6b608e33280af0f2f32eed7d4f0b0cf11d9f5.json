{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  name: 'MerchantDashboard',\n  setup() {\n    const activeView = ref('orders');\n    const orderDetails = ref([]);\n    const products = ref([]);\n\n    // 设置 Axios 默认请求头\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      axios.defaults.headers.common['Authorization'] = `${jwt}`;\n    }\n    const showOrders = () => {\n      activeView.value = 'orders';\n    };\n    const showProducts = () => {\n      activeView.value = 'products';\n    };\n    const fetchOrderDetails = async () => {\n      try {\n        const uid = localStorage.getItem('uid');\n        if (!uid) {\n          console.error('用户ID未找到');\n          return;\n        }\n\n        // 获取订单详情\n        const response = await axios.get('/eShop/orders/getordersbysaler', {\n          params: {\n            uid\n          }\n        });\n        if (response.status !== 200) {\n          console.error('请求失败，状态码:', response.status);\n          return;\n        }\n        const orderDetailsList = response.data.data; // 从 data 中提取订单详情列表\n        console.log('订单详情数据:', orderDetailsList);\n\n        // 检查 orderDetailsList 是否为数组\n        if (!Array.isArray(orderDetailsList)) {\n          console.error('订单详情数据不是数组:', orderDetailsList);\n          return;\n        }\n\n        // 获取每个订单的详细信息\n        const ordersPromises = orderDetailsList.map(async orderDetail => {\n          try {\n            const orderResponse = await axios.post('/eShop/orders/getorderbyorderdetail', {\n              oid: orderDetail.oid\n            });\n            if (orderResponse.status !== 200) {\n              console.error('获取订单信息失败，状态码:', orderResponse.status);\n              return null;\n            }\n            const order = orderResponse.data.data; // 确保从 data 中提取订单信息\n            const [name, email, address] = order.address.split(' ');\n            const orderTime = new Date(parseInt(order.otime)).toLocaleString('zh-CN', {\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric',\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit'\n            });\n\n            // 获取商品名称\n            const productResponse = await axios.get('/eShop/product/getproductbyid', {\n              params: {\n                pid: orderDetail.pid\n              }\n            });\n            if (productResponse.status !== 200) {\n              console.error('获取商品信息失败，状态码:', productResponse.status);\n              return null;\n            }\n            const productName = productResponse.data.data.pname;\n            return {\n              ...orderDetail,\n              customerName: name,\n              customerEmail: email,\n              customerAddress: address,\n              orderTime,\n              productName,\n              productQuantity: orderDetail.odPCont // 假设 orderDetail 中有 quantity 字段\n            };\n          } catch (error) {\n            console.error('获取订单信息时出错:', error);\n            return null;\n          }\n        });\n        orderDetails.value = (await Promise.all(ordersPromises)).filter(item => item !== null);\n      } catch (error) {\n        console.error('获取订单详情失败:', error);\n      }\n    };\n    onMounted(() => {\n      if (activeView.value === 'orders') {\n        fetchOrderDetails();\n      }\n    });\n    return {\n      activeView,\n      orderDetails,\n      products,\n      showOrders,\n      showProducts\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","name","setup","activeView","orderDetails","products","jwt","localStorage","getItem","defaults","headers","common","showOrders","value","showProducts","fetchOrderDetails","uid","console","error","response","get","params","status","orderDetailsList","data","log","Array","isArray","ordersPromises","map","orderDetail","orderResponse","post","oid","order","email","address","split","orderTime","Date","parseInt","otime","toLocaleString","year","month","day","hour","minute","second","productResponse","pid","productName","pname","customerName","customerEmail","customerAddress","productQuantity","odPCont","Promise","all","filter","item"],"sources":["E:\\Vue\\jsproject\\shop\\src\\views\\MerchantPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"merchant-dashboard\">\r\n      <el-container>\r\n        <!-- 侧边栏 -->\r\n        <el-aside width=\"200px\">\r\n          <el-menu default-active=\"1\" class=\"el-menu-vertical-demo\">\r\n            <el-menu-item index=\"1\" @click=\"showOrders\">\r\n              <template v-slot:title>\r\n                <i class=\"el-icon-s-order\"></i>\r\n                <span>订单管理</span>\r\n              </template>\r\n            </el-menu-item>\r\n            <el-menu-item index=\"2\" @click=\"showProducts\">\r\n              <template v-slot:title>\r\n                <i class=\"el-icon-goods\"></i>\r\n                <span>我的商品</span>\r\n              </template>\r\n            </el-menu-item>\r\n          </el-menu>\r\n        </el-aside>\r\n  \r\n        <!-- 主内容区 -->\r\n        <el-main>\r\n          <!-- 订单展示 -->\r\n          <div v-if=\"activeView === 'orders'\">\r\n            <h2>订单管理</h2>\r\n            <el-table :data=\"orderDetails\" style=\"width: 100%\">\r\n              <el-table-column prop=\"oid\" label=\"订单号\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productName\" label=\"商品名称\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productQuantity\" label=\"商品数量\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerName\" label=\"客户姓名\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerEmail\" label=\"客户邮箱\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerAddress\" label=\"客户地址\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"odPMoney\" label=\"订单金额\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"orderTime\" label=\"订单时间\" width=\"180\"></el-table-column>\r\n            </el-table>\r\n          </div>\r\n  \r\n          <!-- 商品管理 -->\r\n          <div v-if=\"activeView === 'products'\">\r\n            <h2>商品管理</h2>\r\n            <!-- 商品管理内容 -->\r\n            <el-table :data=\"products\" style=\"width: 100%\">\r\n              <el-table-column prop=\"productId\" label=\"商品ID\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productName\" label=\"商品名称\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productPrice\" label=\"商品价格\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productStock\" label=\"库存\" width=\"180\"></el-table-column>\r\n            </el-table>\r\n          </div>\r\n        </el-main>\r\n      </el-container>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, onMounted } from 'vue';\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: 'MerchantDashboard',\r\n    setup() {\r\n      const activeView = ref('orders');\r\n      const orderDetails = ref([]);\r\n      const products = ref([]);\r\n  \r\n      // 设置 Axios 默认请求头\r\n      const jwt = localStorage.getItem('jwt');\r\n      if (jwt) {\r\n        axios.defaults.headers.common['Authorization'] = `${jwt}`;\r\n      }\r\n  \r\n      const showOrders = () => {\r\n        activeView.value = 'orders';\r\n      };\r\n  \r\n      const showProducts = () => {\r\n        activeView.value = 'products';\r\n      };\r\n  \r\n      const fetchOrderDetails = async () => {\r\n        try {\r\n          const uid = localStorage.getItem('uid');\r\n          if (!uid) {\r\n            console.error('用户ID未找到');\r\n            return;\r\n          }\r\n  \r\n          // 获取订单详情\r\n          const response = await axios.get('/eShop/orders/getordersbysaler', {\r\n            params: { uid },\r\n          });\r\n  \r\n          if (response.status !== 200) {\r\n            console.error('请求失败，状态码:', response.status);\r\n            return;\r\n          }\r\n  \r\n          const orderDetailsList = response.data.data; // 从 data 中提取订单详情列表\r\n          console.log('订单详情数据:', orderDetailsList);\r\n  \r\n          // 检查 orderDetailsList 是否为数组\r\n          if (!Array.isArray(orderDetailsList)) {\r\n            console.error('订单详情数据不是数组:', orderDetailsList);\r\n            return;\r\n          }\r\n  \r\n          // 获取每个订单的详细信息\r\n          const ordersPromises = orderDetailsList.map(async (orderDetail) => {\r\n            try {\r\n              const orderResponse = await axios.post('/eShop/orders/getorderbyorderdetail', {\r\n                oid: orderDetail.oid,\r\n              });\r\n  \r\n              if (orderResponse.status !== 200) {\r\n                console.error('获取订单信息失败，状态码:', orderResponse.status);\r\n                return null;\r\n              }\r\n  \r\n              const order = orderResponse.data.data; // 确保从 data 中提取订单信息\r\n              const [name, email, address] = order.address.split(' ');\r\n              const orderTime = new Date(parseInt(order.otime)).toLocaleString('zh-CN', {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit',\r\n              });\r\n  \r\n              // 获取商品名称\r\n              const productResponse = await axios.get('/eShop/product/getproductbyid', {\r\n                params: { pid: orderDetail.pid },\r\n              });\r\n  \r\n              if (productResponse.status !== 200) {\r\n                console.error('获取商品信息失败，状态码:', productResponse.status);\r\n                return null;\r\n              }\r\n  \r\n              const productName = productResponse.data.data.pname;\r\n  \r\n              return {\r\n                ...orderDetail,\r\n                customerName: name,\r\n                customerEmail: email,\r\n                customerAddress: address,\r\n                orderTime,\r\n                productName,\r\n                productQuantity: orderDetail.odPCont, // 假设 orderDetail 中有 quantity 字段\r\n              };\r\n            } catch (error) {\r\n              console.error('获取订单信息时出错:', error);\r\n              return null;\r\n            }\r\n          });\r\n  \r\n          orderDetails.value = (await Promise.all(ordersPromises)).filter(item => item !== null);\r\n        } catch (error) {\r\n          console.error('获取订单详情失败:', error);\r\n        }\r\n      };\r\n  \r\n      onMounted(() => {\r\n        if (activeView.value === 'orders') {\r\n          fetchOrderDetails();\r\n        }\r\n      });\r\n  \r\n      return {\r\n        activeView,\r\n        orderDetails,\r\n        products,\r\n        showOrders,\r\n        showProducts,\r\n      };\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .merchant-dashboard {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .el-container {\r\n    height: 100%;\r\n  }\r\n  \r\n  .el-aside {\r\n    background-color: #f5f5f5;\r\n  }\r\n  \r\n  .el-main {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .box-card {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}