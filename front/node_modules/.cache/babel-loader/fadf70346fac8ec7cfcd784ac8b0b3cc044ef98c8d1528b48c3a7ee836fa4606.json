{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, reactive, onMounted, nextTick } from 'vue';\nimport axios from 'axios';\nimport * as echarts from 'echarts';\nexport default {\n  name: 'MerchantDashboard',\n  setup() {\n    const activeView = ref('orders');\n    const orderDetails = ref([]);\n    const products = ref([]);\n    const chartRef = ref(null);\n    let chartInstance = null;\n    const formatPath = path => path.replace(/\\\\/g, '/');\n    const dialogVisible = ref(false);\n    const editForm = reactive({\n      pid: '',\n      pname: '',\n      pdes: '',\n      ppri: 0,\n      pcount: 0,\n      ptype: ''\n    });\n\n    // 设置 Axios 默认请求头\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      axios.defaults.headers.common['Authorization'] = `${jwt}`;\n    }\n    const showOrders = () => {\n      activeView.value = 'orders';\n    };\n    const showProducts = () => {\n      activeView.value = 'products';\n      fetchProducts();\n    };\n    const fetchOrderDetails = async () => {\n      try {\n        const uid = localStorage.getItem('uid');\n        if (!uid) {\n          console.error('用户ID未找到');\n          return;\n        }\n\n        // 获取订单详情\n        const response = await axios.get('/eShop/orders/getordersbysaler', {\n          params: {\n            uid\n          }\n        });\n        if (response.status !== 200) {\n          console.error('请求失败，状态码:', response.status);\n          return;\n        }\n        const orderDetailsList = response.data.data;\n        console.log('订单详情数据:', orderDetailsList);\n        if (!Array.isArray(orderDetailsList)) {\n          console.error('订单详情数据不是数组:', orderDetailsList);\n          return;\n        }\n        const ordersPromises = orderDetailsList.map(async orderDetail => {\n          try {\n            const orderResponse = await axios.post('/eShop/orders/getorderbyorderdetail', {\n              oid: orderDetail.oid\n            });\n            if (orderResponse.status !== 200) {\n              console.error('获取订单信息失败，状态码:', orderResponse.status);\n              return null;\n            }\n            const order = orderResponse.data.data;\n            const [name, email, address] = order.address.split(' ');\n            const orderTime = new Date(parseInt(order.otime)).toISOString().split('T')[0];\n            const productResponse = await axios.get('/eShop/product/getproductbyid', {\n              params: {\n                pid: orderDetail.pid\n              }\n            });\n            if (productResponse.status !== 200) {\n              console.error('获取商品信息失败，状态码:', productResponse.status);\n              return null;\n            }\n            const productName = productResponse.data.data.pname;\n            return {\n              ...orderDetail,\n              customerName: name,\n              customerEmail: email,\n              customerAddress: address,\n              orderTime,\n              productName,\n              productQuantity: orderDetail.odPCount,\n              odPMoney: parseFloat(orderDetail.odPMoney) // 确保金额是数字\n            };\n          } catch (error) {\n            console.error('获取订单信息时出错:', error);\n            return null;\n          }\n        });\n        orderDetails.value = (await Promise.all(ordersPromises)).filter(item => item !== null);\n        console.log(orderDetails.value);\n        updateChart();\n      } catch (error) {\n        console.error('获取订单详情失败:', error);\n      }\n    };\n    const fetchProducts = async () => {\n      try {\n        const uid = localStorage.getItem('uid');\n        if (!uid) {\n          console.error('用户ID未找到');\n          return;\n        }\n\n        // 获取商品信息\n        const response = await axios.get('/eShop/product/getproductbysaler', {\n          params: {\n            uid\n          }\n        });\n        if (response.status !== 200) {\n          console.error('请求失败，状态码:', response.status);\n          return;\n        }\n        products.value = response.data.data.map(product => ({\n          ...product\n        }));\n        console.log('商品数据:', products.value);\n      } catch (error) {\n        console.error('获取商品信息失败:', error);\n      }\n    };\n    const updateChart = async () => {\n      await nextTick();\n      if (!chartInstance) {\n        chartInstance = echarts.init(chartRef.value);\n      }\n      const today = new Date();\n      const dates = Array.from({\n        length: 7\n      }, (_, i) => {\n        const date = new Date(today);\n        date.setDate(today.getDate() - i);\n        return date.toISOString().split('T')[0];\n      }).reverse();\n      const orderAmounts = dates.map(date => {\n        const dailyOrders = orderDetails.value.filter(order => order.orderTime.startsWith(date));\n        console.log(`Date: ${date}, Orders:`, dailyOrders);\n        return dailyOrders.reduce((sum, order) => sum + order.odPMoney, 0);\n      });\n      const option = {\n        title: {\n          text: '订单金额统计'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: dates\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: orderAmounts,\n          type: 'line'\n        }]\n      };\n      chartInstance.setOption(option);\n    };\n    const editProduct = product => {\n      Object.assign(editForm, product);\n      dialogVisible.value = true;\n    };\n    const updateProduct = async () => {\n      try {\n        const response = await axios.post('/eShop/product/updateproduct', editForm);\n        if (response.status === 200) {\n          console.log('更新成功');\n          dialogVisible.value = false;\n          fetchProducts(); // 更新商品列表\n        } else {\n          console.error('更新失败');\n        }\n      } catch (error) {\n        console.error('请求出错:', error);\n      }\n    };\n    onMounted(() => {\n      if (activeView.value === 'orders') {\n        fetchOrderDetails();\n      }\n    });\n    return {\n      activeView,\n      orderDetails,\n      products,\n      showOrders,\n      showProducts,\n      chartRef,\n      chartInstance,\n      formatPath,\n      dialogVisible,\n      editForm,\n      editProduct,\n      updateProduct\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","nextTick","axios","echarts","name","setup","activeView","orderDetails","products","chartRef","chartInstance","formatPath","path","replace","dialogVisible","editForm","pid","pname","pdes","ppri","pcount","ptype","jwt","localStorage","getItem","defaults","headers","common","showOrders","value","showProducts","fetchProducts","fetchOrderDetails","uid","console","error","response","get","params","status","orderDetailsList","data","log","Array","isArray","ordersPromises","map","orderDetail","orderResponse","post","oid","order","email","address","split","orderTime","Date","parseInt","otime","toISOString","productResponse","productName","customerName","customerEmail","customerAddress","productQuantity","odPCount","odPMoney","parseFloat","Promise","all","filter","item","updateChart","product","init","today","dates","from","length","_","i","date","setDate","getDate","reverse","orderAmounts","dailyOrders","startsWith","reduce","sum","option","title","text","tooltip","trigger","xAxis","type","yAxis","series","setOption","editProduct","Object","assign","updateProduct"],"sources":["E:\\Vue\\jsproject\\shop\\src\\views\\MerchantPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"merchant-dashboard\">\r\n      <el-container>\r\n        <!-- 侧边栏 -->\r\n        <el-aside width=\"200px\">\r\n          <el-menu default-active=\"1\" class=\"el-menu-vertical-demo\">\r\n            <el-menu-item index=\"1\" @click=\"showOrders\">\r\n              <template v-slot:title>\r\n                <i class=\"el-icon-s-order\"></i>\r\n                <span>订单管理</span>\r\n              </template>\r\n            </el-menu-item>\r\n            <el-menu-item index=\"2\" @click=\"showProducts\">\r\n              <template v-slot:title>\r\n                <i class=\"el-icon-goods\"></i>\r\n                <span>我的商品</span>\r\n              </template>\r\n            </el-menu-item>\r\n          </el-menu>\r\n        </el-aside>\r\n  \r\n        <!-- 主内容区 -->\r\n        <el-main>\r\n          <!-- 订单展示 -->\r\n          <div v-if=\"activeView === 'orders'\">\r\n            <h2>订单管理</h2>\r\n            <el-table :data=\"orderDetails\" style=\"width: 100%\">\r\n              <el-table-column prop=\"oid\" label=\"订单号\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productName\" label=\"商品名称\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"productQuantity\" label=\"商品数量\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerName\" label=\"客户姓名\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerEmail\" label=\"客户邮箱\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"customerAddress\" label=\"客户地址\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"odPMoney\" label=\"订单金额\" width=\"180\"></el-table-column>\r\n              <el-table-column prop=\"orderTime\" label=\"订单时间\" width=\"180\"></el-table-column>\r\n            </el-table>\r\n  \r\n            <!-- 折线图 -->\r\n            <div ref=\"chartRef\" style=\"width: 100%; height: 400px; margin-top: 20px;\"></div>\r\n          </div>\r\n  \r\n          <!-- 商品管理 -->\r\n          <div v-if=\"activeView === 'products'\">\r\n            <h2>商品管理</h2>\r\n            <!-- 商品管理内容 -->\r\n            <el-row :gutter=\"20\">\r\n              <el-col :span=\"8\" v-for=\"product in products\" :key=\"product.productId\">\r\n                <el-card class=\"product-card\" :body-style=\"{ padding: '20px' }\" @dblclick=\"editProduct(product)\">\r\n                  <img :src=\"formatPath(product.purl)\" alt=\"商品图片\" class=\"product-image\">\r\n                  <div class=\"product-info\">\r\n                    <h3>{{ product.pname }}</h3>\r\n                    <p>{{ product.pdes }}</p>\r\n                    <p>价格: ¥{{ product.ppri }}</p>\r\n                    <p>库存: {{ product.pcount }}</p>\r\n                    <p>种类: {{ product.ptype }}</p>\r\n                  </div>\r\n                </el-card>\r\n              </el-col>\r\n            </el-row>\r\n          </div>\r\n        </el-main>\r\n      </el-container>\r\n  \r\n      <!-- 编辑商品对话框 -->\r\n      <el-dialog v-model:visible=\"dialogVisible\" title=\"编辑商品\">\r\n        <el-form :model=\"editForm\">\r\n          <el-form-item label=\"名称\">\r\n            <el-input v-model=\"editForm.pname\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"描述\">\r\n            <el-input v-model=\"editForm.pdes\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"价格\">\r\n            <el-input v-model=\"editForm.ppri\" type=\"number\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"库存\">\r\n            <el-input v-model=\"editForm.pcount\" type=\"number\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"种类\">\r\n            <el-input v-model=\"editForm.ptype\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <template v-slot:footer>\r\n          <div class=\"dialog-footer\">\r\n            <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n            <el-button type=\"primary\" @click=\"updateProduct\">保存</el-button>\r\n          </div>\r\n        </template>\r\n      </el-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, reactive, onMounted, nextTick } from 'vue';\r\n  import axios from 'axios';\r\n  import * as echarts from 'echarts';\r\n  \r\n  export default {\r\n    name: 'MerchantDashboard',\r\n    setup() {\r\n      const activeView = ref('orders');\r\n      const orderDetails = ref([]);\r\n      const products = ref([]);\r\n      const chartRef = ref(null);\r\n      let chartInstance = null;\r\n      const formatPath = (path) => path.replace(/\\\\/g, '/');\r\n  \r\n      const dialogVisible = ref(false);\r\n      const editForm = reactive({\r\n        pid: '',\r\n        pname: '',\r\n        pdes: '',\r\n        ppri: 0,\r\n        pcount: 0,\r\n        ptype: ''\r\n      });\r\n  \r\n      // 设置 Axios 默认请求头\r\n      const jwt = localStorage.getItem('jwt');\r\n      if (jwt) {\r\n        axios.defaults.headers.common['Authorization'] = `${jwt}`;\r\n      }\r\n  \r\n      const showOrders = () => {\r\n        activeView.value = 'orders';\r\n      };\r\n  \r\n      const showProducts = () => {\r\n        activeView.value = 'products';\r\n        fetchProducts();\r\n      };\r\n  \r\n      const fetchOrderDetails = async () => {\r\n        try {\r\n          const uid = localStorage.getItem('uid');\r\n          if (!uid) {\r\n            console.error('用户ID未找到');\r\n            return;\r\n          }\r\n  \r\n          // 获取订单详情\r\n          const response = await axios.get('/eShop/orders/getordersbysaler', {\r\n            params: { uid },\r\n          });\r\n  \r\n          if (response.status !== 200) {\r\n            console.error('请求失败，状态码:', response.status);\r\n            return;\r\n          }\r\n  \r\n          const orderDetailsList = response.data.data;\r\n          console.log('订单详情数据:', orderDetailsList);\r\n  \r\n          if (!Array.isArray(orderDetailsList)) {\r\n            console.error('订单详情数据不是数组:', orderDetailsList);\r\n            return;\r\n          }\r\n  \r\n          const ordersPromises = orderDetailsList.map(async (orderDetail) => {\r\n            try {\r\n              const orderResponse = await axios.post('/eShop/orders/getorderbyorderdetail', {\r\n                oid: orderDetail.oid,\r\n              });\r\n  \r\n              if (orderResponse.status !== 200) {\r\n                console.error('获取订单信息失败，状态码:', orderResponse.status);\r\n                return null;\r\n              }\r\n  \r\n              const order = orderResponse.data.data;\r\n              const [name, email, address] = order.address.split(' ');\r\n              const orderTime = new Date(parseInt(order.otime)).toISOString().split('T')[0];\r\n  \r\n              const productResponse = await axios.get('/eShop/product/getproductbyid', {\r\n                params: { pid: orderDetail.pid },\r\n              });\r\n  \r\n              if (productResponse.status !== 200) {\r\n                console.error('获取商品信息失败，状态码:', productResponse.status);\r\n                return null;\r\n              }\r\n  \r\n              const productName = productResponse.data.data.pname;\r\n  \r\n              return {\r\n                ...orderDetail,\r\n                customerName: name,\r\n                customerEmail: email,\r\n                customerAddress: address,\r\n                orderTime,\r\n                productName,\r\n                productQuantity: orderDetail.odPCount,\r\n                odPMoney: parseFloat(orderDetail.odPMoney) // 确保金额是数字\r\n              };\r\n            } catch (error) {\r\n              console.error('获取订单信息时出错:', error);\r\n              return null;\r\n            }\r\n          });\r\n  \r\n          orderDetails.value = (await Promise.all(ordersPromises)).filter(item => item !== null);\r\n          console.log(orderDetails.value);\r\n  \r\n          updateChart();\r\n        } catch (error) {\r\n          console.error('获取订单详情失败:', error);\r\n        }\r\n      };\r\n  \r\n      const fetchProducts = async () => {\r\n        try {\r\n          const uid = localStorage.getItem('uid');\r\n          if (!uid) {\r\n            console.error('用户ID未找到');\r\n            return;\r\n          }\r\n  \r\n          // 获取商品信息\r\n          const response = await axios.get('/eShop/product/getproductbysaler', {\r\n            params: { uid },\r\n          });\r\n  \r\n          if (response.status !== 200) {\r\n            console.error('请求失败，状态码:', response.status);\r\n            return;\r\n          }\r\n  \r\n          products.value = response.data.data.map(product => ({\r\n            ...product,\r\n          }));\r\n          console.log('商品数据:', products.value);\r\n        } catch (error) {\r\n          console.error('获取商品信息失败:', error);\r\n        }\r\n      };\r\n  \r\n      const updateChart = async () => {\r\n        await nextTick();\r\n        if (!chartInstance) {\r\n          chartInstance = echarts.init(chartRef.value);\r\n        }\r\n  \r\n        const today = new Date();\r\n        const dates = Array.from({ length: 7 }, (_, i) => {\r\n          const date = new Date(today);\r\n          date.setDate(today.getDate() - i);\r\n          return date.toISOString().split('T')[0];\r\n        }).reverse();\r\n  \r\n        const orderAmounts = dates.map(date => {\r\n          const dailyOrders = orderDetails.value.filter(order => order.orderTime.startsWith(date));\r\n          console.log(`Date: ${date}, Orders:`, dailyOrders);\r\n          return dailyOrders.reduce((sum, order) => sum + order.odPMoney, 0);\r\n        });\r\n  \r\n        const option = {\r\n          title: {\r\n            text: '订单金额统计',\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: dates,\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n          },\r\n          series: [\r\n            {\r\n              data: orderAmounts,\r\n              type: 'line',\r\n            },\r\n          ],\r\n        };\r\n  \r\n        chartInstance.setOption(option);\r\n      };\r\n  \r\n      const editProduct = (product) => {\r\n        \r\n        Object.assign(editForm, product);\r\n        dialogVisible.value = true;\r\n      };\r\n  \r\n      const updateProduct = async () => {\r\n        try {\r\n          const response = await axios.post('/eShop/product/updateproduct', editForm);\r\n          if (response.status === 200) {\r\n            console.log('更新成功');\r\n            dialogVisible.value = false;\r\n            fetchProducts(); // 更新商品列表\r\n          } else {\r\n            console.error('更新失败');\r\n          }\r\n        } catch (error) {\r\n          console.error('请求出错:', error);\r\n        }\r\n      };\r\n  \r\n      onMounted(() => {\r\n        if (activeView.value === 'orders') {\r\n          fetchOrderDetails();\r\n        }\r\n      });\r\n  \r\n      return {\r\n        activeView,\r\n        orderDetails,\r\n        products,\r\n        showOrders,\r\n        showProducts,\r\n        chartRef,\r\n        chartInstance,\r\n        formatPath,\r\n        dialogVisible,\r\n        editForm,\r\n        editProduct,\r\n        updateProduct\r\n      };\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .merchant-dashboard {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .el-container {\r\n    height: 100%;\r\n  }\r\n  \r\n  .el-aside {\r\n    background-color: #f5f5f5;\r\n  }\r\n  \r\n  .el-main {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .product-card {\r\n    transition: transform 0.3s, box-shadow 0.3s;\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n    height: 400px; /* 固定卡片高度 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .product-card:hover {\r\n    transform: translateY(-10px);\r\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  .product-image {\r\n    width: 100%;\r\n    height: 200px;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  .product-info {\r\n    padding: 14px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .product-info h3 {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .product-info p {\r\n    font-size: 14px;\r\n    color: #666;\r\n    margin: 5px 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .dialog-footer {\r\n    text-align: right;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}